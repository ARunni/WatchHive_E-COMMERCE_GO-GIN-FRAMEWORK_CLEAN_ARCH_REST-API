// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/user.go

// Package mock is a generated GoMock package.
package mock

import (
	models "WatchHive/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserRepository) AddAddress(userID int, address models.AddressInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", userID, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserRepositoryMockRecorder) AddAddress(userID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserRepository)(nil).AddAddress), userID, address)
}

// AddressExist mocks base method.
func (m *MockUserRepository) AddressExist(orderBody models.OrderIncoming) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressExist", orderBody)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressExist indicates an expected call of AddressExist.
func (mr *MockUserRepositoryMockRecorder) AddressExist(orderBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressExist", reflect.TypeOf((*MockUserRepository)(nil).AddressExist), orderBody)
}

// AmountInRefferals mocks base method.
func (m *MockUserRepository) AmountInRefferals(userID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmountInRefferals", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmountInRefferals indicates an expected call of AmountInRefferals.
func (mr *MockUserRepositoryMockRecorder) AmountInRefferals(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmountInRefferals", reflect.TypeOf((*MockUserRepository)(nil).AmountInRefferals), userID)
}

// ChangePassword mocks base method.
func (m *MockUserRepository) ChangePassword(userID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", userID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserRepositoryMockRecorder) ChangePassword(userID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserRepository)(nil).ChangePassword), userID, password)
}

// CheckIfUserAddress mocks base method.
func (m *MockUserRepository) CheckIfUserAddress(userID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfUserAddress", userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckIfUserAddress indicates an expected call of CheckIfUserAddress.
func (mr *MockUserRepositoryMockRecorder) CheckIfUserAddress(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfUserAddress", reflect.TypeOf((*MockUserRepository)(nil).CheckIfUserAddress), userID)
}

// CheckUserAvilability mocks base method.
func (m *MockUserRepository) CheckUserAvilability(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserAvilability", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserAvilability indicates an expected call of CheckUserAvilability.
func (mr *MockUserRepositoryMockRecorder) CheckUserAvilability(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserAvilability", reflect.TypeOf((*MockUserRepository)(nil).CheckUserAvilability), email)
}

// CheckUserById mocks base method.
func (m *MockUserRepository) CheckUserById(userID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserById", userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserById indicates an expected call of CheckUserById.
func (mr *MockUserRepositoryMockRecorder) CheckUserById(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserById", reflect.TypeOf((*MockUserRepository)(nil).CheckUserById), userID)
}

// EditProfile mocks base method.
func (m *MockUserRepository) EditProfile(user models.UsersProfileDetails) (models.UsersProfileDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfile", user)
	ret0, _ := ret[0].(models.UsersProfileDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditProfile indicates an expected call of EditProfile.
func (mr *MockUserRepositoryMockRecorder) EditProfile(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockUserRepository)(nil).EditProfile), user)
}

// FindUserByEmail mocks base method.
func (m *MockUserRepository) FindUserByEmail(user models.UserLogin) (models.UserSignInResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", user)
	ret0, _ := ret[0].(models.UserSignInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserRepositoryMockRecorder) FindUserByEmail(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindUserByEmail), user)
}

// FindUserById mocks base method.
func (m *MockUserRepository) FindUserById(id string) (models.UserSignInResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", id)
	ret0, _ := ret[0].(models.UserSignInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockUserRepositoryMockRecorder) FindUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockUserRepository)(nil).FindUserById), id)
}

// GetAllAddress mocks base method.
func (m *MockUserRepository) GetAllAddress(userID int) ([]models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddress", userID)
	ret0, _ := ret[0].([]models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddress indicates an expected call of GetAllAddress.
func (mr *MockUserRepositoryMockRecorder) GetAllAddress(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddress", reflect.TypeOf((*MockUserRepository)(nil).GetAllAddress), userID)
}

// GetUserIdFromReferralCode mocks base method.
func (m *MockUserRepository) GetUserIdFromReferralCode(ReferralCode string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdFromReferralCode", ReferralCode)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdFromReferralCode indicates an expected call of GetUserIdFromReferralCode.
func (mr *MockUserRepositoryMockRecorder) GetUserIdFromReferralCode(ReferralCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdFromReferralCode", reflect.TypeOf((*MockUserRepository)(nil).GetUserIdFromReferralCode), ReferralCode)
}

// NewReferralEntry mocks base method.
func (m *MockUserRepository) NewReferralEntry(userId int, userReferral string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReferralEntry", userId, userReferral)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewReferralEntry indicates an expected call of NewReferralEntry.
func (mr *MockUserRepositoryMockRecorder) NewReferralEntry(userId, userReferral interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReferralEntry", reflect.TypeOf((*MockUserRepository)(nil).NewReferralEntry), userId, userReferral)
}

// ShowUserDetails mocks base method.
func (m *MockUserRepository) ShowUserDetails(userID int) (models.UsersProfileDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowUserDetails", userID)
	ret0, _ := ret[0].(models.UsersProfileDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowUserDetails indicates an expected call of ShowUserDetails.
func (mr *MockUserRepositoryMockRecorder) ShowUserDetails(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowUserDetails", reflect.TypeOf((*MockUserRepository)(nil).ShowUserDetails), userID)
}

// UpdateReferralAmount mocks base method.
func (m *MockUserRepository) UpdateReferralAmount(referralAmount float64, referredUserId, currentUserID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReferralAmount", referralAmount, referredUserId, currentUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReferralAmount indicates an expected call of UpdateReferralAmount.
func (mr *MockUserRepositoryMockRecorder) UpdateReferralAmount(referralAmount, referredUserId, currentUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReferralAmount", reflect.TypeOf((*MockUserRepository)(nil).UpdateReferralAmount), referralAmount, referredUserId, currentUserID)
}

// UserBlockStatus mocks base method.
func (m *MockUserRepository) UserBlockStatus(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserBlockStatus", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserBlockStatus indicates an expected call of UserBlockStatus.
func (mr *MockUserRepositoryMockRecorder) UserBlockStatus(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserBlockStatus", reflect.TypeOf((*MockUserRepository)(nil).UserBlockStatus), email)
}

// UserSignup mocks base method.
func (m *MockUserRepository) UserSignup(user models.UserDetails) (models.UserDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", user)
	ret0, _ := ret[0].(models.UserDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockUserRepositoryMockRecorder) UserSignup(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockUserRepository)(nil).UserSignup), user)
}
